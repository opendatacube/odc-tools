name: Update Dev Docker

on:
  pull_request:
    paths:
      - 'docker/**'
  push:
    paths:
      - 'docker/**'

env:
  ORG: opendatacube
  IMAGE: odc-test-runner

jobs:
  dev-docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Config
      id: cfg
      run: |
        echo ::set-output name=docker_image::${ORG}/${IMAGE}:latest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Test Docker
      uses: docker/build-push-action@v2
      with:
        file: docker/Dockerfile
        context: docker
        tags: ${{ steps.cfg.outputs.docker_image }}
        outputs: type=docker
        build-args: |
          V_BASE=3.3.0
          V_PG=12
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=local,mode=max,dest=/tmp/.buildx-cache-new

    # This ugly bit is necessary if you don't want your cache to grow forever
    # till it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache


    - name: Run Dockerized Tests
      timeout-minutes: 20
      shell: bash
      run: |
        make -C docker run-test

    - name: DockerHub Login
      id: dkr
      if: |
        github.event_name == 'push'
        && github.ref == 'refs/heads/develop'
        && github.repository == 'opendatacube/odc-tools'

      run: |
        if [ -n "${{ secrets.DOCKER_USER }}" ]; then
           echo "Login to DockerHub as ${{ secrets.DOCKER_USER }}"
           echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
           echo "::set-output name=logged_in::yes"
        else
           echo "Set DOCKER_{PASS,USER} secrets to push to docker"
           echo "::set-output name=logged_in::no"
        fi

    - name: DockerHub Push
      if: |
        steps.dkr.outputs.logged_in == 'yes'

      run: |
        docker push "${{ steps.cfg.outputs.docker_image }}"
